// <auto-generated />
using System;
using LX.TestSpace.Server.DAL.DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LX.TestSpace.Server.Migrations
{
    [DbContext(typeof(TestSpaceDbContext))]
    [Migration("20230614075048_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes", (string)null);
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.Key", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Algorithm")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DataProtected")
                        .HasColumnType("bit");

                    b.Property<bool>("IsX509Certificate")
                        .HasColumnType("bit");

                    b.Property<string>("Use")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Use");

                    b.ToTable("Keys", (string)null);
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Key");

                    b.HasIndex("ConsumedTime");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.HasIndex("SubjectId", "SessionId", "Type");

                    b.ToTable("PersistedGrants", (string)null);
                });

            modelBuilder.Entity("LX.TestSpace.Server.DAL.Entities.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsCorrect = true,
                            QuestionId = 1,
                            Text = "Common language runtime"
                        },
                        new
                        {
                            Id = 2,
                            IsCorrect = false,
                            QuestionId = 1,
                            Text = "Exception handling mechanism"
                        },
                        new
                        {
                            Id = 3,
                            IsCorrect = false,
                            QuestionId = 1,
                            Text = "Memory release mechanism"
                        },
                        new
                        {
                            Id = 4,
                            IsCorrect = false,
                            QuestionId = 1,
                            Text = "Code containing a set of instructions"
                        },
                        new
                        {
                            Id = 5,
                            IsCorrect = true,
                            QuestionId = 2,
                            Text = "Abstract from the database and work with data regardless of storage"
                        },
                        new
                        {
                            Id = 6,
                            IsCorrect = false,
                            QuestionId = 2,
                            Text = "Create applications regardless of which OS the code will run on"
                        },
                        new
                        {
                            Id = 7,
                            IsCorrect = false,
                            QuestionId = 2,
                            Text = "Use the latest versions of C# and Visual Studio"
                        },
                        new
                        {
                            Id = 8,
                            IsCorrect = true,
                            QuestionId = 3,
                            Text = "Reference, value, primitive"
                        },
                        new
                        {
                            Id = 9,
                            IsCorrect = false,
                            QuestionId = 3,
                            Text = "CustomTypes, reference, value"
                        },
                        new
                        {
                            Id = 10,
                            IsCorrect = false,
                            QuestionId = 3,
                            Text = "Value, reference"
                        },
                        new
                        {
                            Id = 11,
                            IsCorrect = false,
                            QuestionId = 3,
                            Text = "String, Object, Double, Int32, Int64"
                        },
                        new
                        {
                            Id = 12,
                            IsCorrect = true,
                            QuestionId = 4,
                            Text = "Value types are more used in code than reference types"
                        },
                        new
                        {
                            Id = 13,
                            IsCorrect = false,
                            QuestionId = 4,
                            Text = "Almost nothing, since reference types still refer to value types"
                        },
                        new
                        {
                            Id = 14,
                            IsCorrect = false,
                            QuestionId = 4,
                            Text = "Value types significantly outnumber reference types in terms of memory footprint"
                        },
                        new
                        {
                            Id = 15,
                            IsCorrect = false,
                            QuestionId = 4,
                            Text = "Reference types reside on the managed heap, value on the stack"
                        },
                        new
                        {
                            Id = 16,
                            IsCorrect = false,
                            QuestionId = 4,
                            Text = "For reference types, space is allocated on the hard disk, for significant types - in RAM"
                        },
                        new
                        {
                            Id = 17,
                            IsCorrect = true,
                            QuestionId = 5,
                            Text = "Yes, it's a reference type, and like all reference types, it can be passed by reference."
                        },
                        new
                        {
                            Id = 18,
                            IsCorrect = false,
                            QuestionId = 5,
                            Text = "It depends on Visual Studio settings"
                        },
                        new
                        {
                            Id = 19,
                            IsCorrect = false,
                            QuestionId = 5,
                            Text = "No, strings are immutable, their value cannot be changed after creation"
                        },
                        new
                        {
                            Id = 20,
                            IsCorrect = true,
                            QuestionId = 6,
                            Text = "StringBuilder has less \"weight\""
                        },
                        new
                        {
                            Id = 21,
                            IsCorrect = false,
                            QuestionId = 6,
                            Text = "StringBuilder is a deprecated type that has to be supported because older applications still exist."
                        },
                        new
                        {
                            Id = 22,
                            IsCorrect = false,
                            QuestionId = 6,
                            Text = "Which StringBuilder? This type doesn't exist at all."
                        },
                        new
                        {
                            Id = 23,
                            IsCorrect = false,
                            QuestionId = 6,
                            Text = "When the String type is changed, a new string is always created, when the StringBuilder is changed, the current string is changed."
                        },
                        new
                        {
                            Id = 24,
                            IsCorrect = true,
                            QuestionId = 7,
                            Text = "Using a special JSON format"
                        },
                        new
                        {
                            Id = 25,
                            IsCorrect = false,
                            QuestionId = 7,
                            Text = "Using Method Parameters"
                        },
                        new
                        {
                            Id = 26,
                            IsCorrect = false,
                            QuestionId = 7,
                            Text = "With the help of a teammate"
                        },
                        new
                        {
                            Id = 27,
                            IsCorrect = false,
                            QuestionId = 7,
                            Text = "Using EntityFramework"
                        },
                        new
                        {
                            Id = 28,
                            IsCorrect = false,
                            QuestionId = 8,
                            Text = "These are any arguments (all arguments have their own name)."
                        },
                        new
                        {
                            Id = 29,
                            IsCorrect = false,
                            QuestionId = 8,
                            Text = "These are the options that use the reserved names."
                        },
                        new
                        {
                            Id = 30,
                            IsCorrect = false,
                            QuestionId = 8,
                            Text = "These are the arguments whose names we force when creating an object."
                        },
                        new
                        {
                            Id = 31,
                            IsCorrect = true,
                            QuestionId = 9,
                            Text = "Because it was necessary to somehow distinguish between languages like C and C#."
                        },
                        new
                        {
                            Id = 32,
                            IsCorrect = false,
                            QuestionId = 9,
                            Text = "Because in C# we operate on objects."
                        },
                        new
                        {
                            Id = 33,
                            IsCorrect = false,
                            QuestionId = 9,
                            Text = "Because the C# language allows us to navigate the code more."
                        },
                        new
                        {
                            Id = 34,
                            IsCorrect = false,
                            QuestionId = 9,
                            Text = "Because it is very similar to C++, and C++ is an object-oriented language."
                        },
                        new
                        {
                            Id = 35,
                            IsCorrect = true,
                            QuestionId = 10,
                            Text = "Everything is simple here, one language is used to write the Backend, the second - for the Frontend, this is the main difference."
                        },
                        new
                        {
                            Id = 36,
                            IsCorrect = false,
                            QuestionId = 10,
                            Text = "C# is an object-oriented language, JavaScript is not."
                        },
                        new
                        {
                            Id = 37,
                            IsCorrect = false,
                            QuestionId = 10,
                            Text = "There are no differences, these are languages from different companies."
                        },
                        new
                        {
                            Id = 38,
                            IsCorrect = false,
                            QuestionId = 10,
                            Text = "C# applications can be compiled on Linux, JavaScript cannot."
                        },
                        new
                        {
                            Id = 39,
                            IsCorrect = true,
                            QuestionId = 11,
                            Text = "There is a special mechanism for this, (GC) which is responsible for garbage collection."
                        },
                        new
                        {
                            Id = 40,
                            IsCorrect = false,
                            QuestionId = 11,
                            Text = "We must constantly remember that unused objects must be deleted."
                        },
                        new
                        {
                            Id = 41,
                            IsCorrect = false,
                            QuestionId = 11,
                            Text = "It is necessary to use the Using directive more often."
                        },
                        new
                        {
                            Id = 42,
                            IsCorrect = true,
                            QuestionId = 12,
                            Text = "Struct is an obsolete type that cannot be used, every time we create a Struct we must mark it with the Obsolete attribute."
                        },
                        new
                        {
                            Id = 43,
                            IsCorrect = true,
                            QuestionId = 12,
                            Text = "Struct is a value type and Class is a reference type."
                        },
                        new
                        {
                            Id = 44,
                            IsCorrect = false,
                            QuestionId = 12,
                            Text = "Struct is the same as Class, only serves to denote small classes."
                        },
                        new
                        {
                            Id = 45,
                            IsCorrect = false,
                            QuestionId = 12,
                            Text = "Struct is generally from JavaScript and has nothing to do with C#."
                        },
                        new
                        {
                            Id = 46,
                            IsCorrect = true,
                            QuestionId = 13,
                            Text = "Serves to generate random values."
                        },
                        new
                        {
                            Id = 47,
                            IsCorrect = false,
                            QuestionId = 13,
                            Text = "This marks the main Class, and serves to be able to use previously defined methods."
                        },
                        new
                        {
                            Id = 48,
                            IsCorrect = false,
                            QuestionId = 13,
                            Text = "This is a generic mechanism that allows you to substitute any type in a method or class, thereby avoiding the use of boxing and unboxing."
                        },
                        new
                        {
                            Id = 49,
                            IsCorrect = false,
                            QuestionId = 13,
                            Text = "It's just \"syntactic sugar\" that serves to make it easier to write code."
                        },
                        new
                        {
                            Id = 50,
                            IsCorrect = true,
                            QuestionId = 14,
                            Text = "This is code that we didn't write, so we can't control it."
                        },
                        new
                        {
                            Id = 51,
                            IsCorrect = false,
                            QuestionId = 14,
                            Text = "This is a code in which we absolutely do not understand what is happening, so we cannot influence it."
                        },
                        new
                        {
                            Id = 52,
                            IsCorrect = false,
                            QuestionId = 14,
                            Text = "Code that doesn't run in the CLR."
                        },
                        new
                        {
                            Id = 53,
                            IsCorrect = false,
                            QuestionId = 14,
                            Text = "Code uploaded on GitHub."
                        },
                        new
                        {
                            Id = 54,
                            IsCorrect = true,
                            QuestionId = 15,
                            Text = "Yes."
                        },
                        new
                        {
                            Id = 55,
                            IsCorrect = false,
                            QuestionId = 15,
                            Text = "No."
                        },
                        new
                        {
                            Id = 56,
                            IsCorrect = false,
                            QuestionId = 15,
                            Text = "We can, if the class has at least one non-static method."
                        },
                        new
                        {
                            Id = 57,
                            IsCorrect = false,
                            QuestionId = 15,
                            Text = "No, only if you do not enable this option in the Visual Studio settings."
                        },
                        new
                        {
                            Id = 58,
                            IsCorrect = true,
                            QuestionId = 16,
                            Text = "Private, public, private protected, protected, internal, protected internal"
                        },
                        new
                        {
                            Id = 59,
                            IsCorrect = false,
                            QuestionId = 16,
                            Text = "Private, public, public protected, protected, internal, public internal"
                        },
                        new
                        {
                            Id = 60,
                            IsCorrect = false,
                            QuestionId = 16,
                            Text = "Private, public, public protected, protected, internal, public internal, private internal"
                        },
                        new
                        {
                            Id = 61,
                            IsCorrect = true,
                            QuestionId = 17,
                            Text = "Such class components are available only in its assembly."
                        },
                        new
                        {
                            Id = 62,
                            IsCorrect = false,
                            QuestionId = 17,
                            Text = "Such class components are accessible from anywhere in its class or in derived classes."
                        },
                        new
                        {
                            Id = 63,
                            IsCorrect = false,
                            QuestionId = 17,
                            Text = "Such class components are available to all team members."
                        },
                        new
                        {
                            Id = 64,
                            IsCorrect = false,
                            QuestionId = 17,
                            Text = "Nobody, this is a protected class, and serves to work only inside this class."
                        },
                        new
                        {
                            Id = 65,
                            IsCorrect = true,
                            QuestionId = 18,
                            Text = "Interface allows us to implement loose coupling"
                        },
                        new
                        {
                            Id = 66,
                            IsCorrect = false,
                            QuestionId = 18,
                            Text = "As such, there is no advantage, Interface came to replace Abstract classes"
                        },
                        new
                        {
                            Id = 67,
                            IsCorrect = false,
                            QuestionId = 18,
                            Text = "Interface should only be used when we need multiple inheritance"
                        },
                        new
                        {
                            Id = 68,
                            IsCorrect = true,
                            QuestionId = 19,
                            Text = "No, it can only define"
                        },
                        new
                        {
                            Id = 69,
                            IsCorrect = false,
                            QuestionId = 19,
                            Text = "It can if they are marked as virtual"
                        },
                        new
                        {
                            Id = 70,
                            IsCorrect = false,
                            QuestionId = 19,
                            Text = "It can if we use a new version of the C# language"
                        },
                        new
                        {
                            Id = 71,
                            IsCorrect = true,
                            QuestionId = 20,
                            Text = "Yes, if they are marked as virtual"
                        },
                        new
                        {
                            Id = 72,
                            IsCorrect = false,
                            QuestionId = 20,
                            Text = "No, only methods are described in Interface"
                        },
                        new
                        {
                            Id = 73,
                            IsCorrect = false,
                            QuestionId = 20,
                            Text = "Yes"
                        },
                        new
                        {
                            Id = 74,
                            IsCorrect = true,
                            QuestionId = 21,
                            Text = "It is an open source ORM framework for ADO.NET that is part of the .NET Framework."
                        },
                        new
                        {
                            Id = 75,
                            IsCorrect = false,
                            QuestionId = 21,
                            Text = "This is a technology that allows us to use C# types"
                        },
                        new
                        {
                            Id = 76,
                            IsCorrect = false,
                            QuestionId = 21,
                            Text = "This is what IL code is generated with."
                        },
                        new
                        {
                            Id = 77,
                            IsCorrect = false,
                            QuestionId = 21,
                            Text = "This is the last thing I will use in my application."
                        },
                        new
                        {
                            Id = 78,
                            IsCorrect = true,
                            QuestionId = 22,
                            Text = "Often used in opening a database connection session, opening a file open thread."
                        },
                        new
                        {
                            Id = 79,
                            IsCorrect = false,
                            QuestionId = 22,
                            Text = "Used to connect relational databases"
                        },
                        new
                        {
                            Id = 80,
                            IsCorrect = false,
                            QuestionId = 22,
                            Text = "Used to connect non-relational databases"
                        },
                        new
                        {
                            Id = 81,
                            IsCorrect = false,
                            QuestionId = 22,
                            Text = "Used to debug an application"
                        },
                        new
                        {
                            Id = 82,
                            IsCorrect = true,
                            QuestionId = 23,
                            Text = "This is developer’s nickname ( Jason Statham )"
                        },
                        new
                        {
                            Id = 83,
                            IsCorrect = false,
                            QuestionId = 23,
                            Text = "Text exchange data format based on JavaScript."
                        },
                        new
                        {
                            Id = 84,
                            IsCorrect = false,
                            QuestionId = 23,
                            Text = "Text-based data exchange format based on XML."
                        },
                        new
                        {
                            Id = 85,
                            IsCorrect = false,
                            QuestionId = 23,
                            Text = "This is an extension that allows the use of JavaScript in the application."
                        },
                        new
                        {
                            Id = 86,
                            IsCorrect = true,
                            QuestionId = 24,
                            Text = "All you need to do is write array.ForEach( x => x…..)"
                        },
                        new
                        {
                            Id = 87,
                            IsCorrect = false,
                            QuestionId = 24,
                            Text = "We need to make sure our collection implements the IEnumerable interface."
                        },
                        new
                        {
                            Id = 88,
                            IsCorrect = false,
                            QuestionId = 24,
                            Text = "Our collection needs to be sorted"
                        },
                        new
                        {
                            Id = 89,
                            IsCorrect = false,
                            QuestionId = 24,
                            Text = "We need to make sure our collection implements the IEnumerable interface and only has primitive types."
                        });
                });

            modelBuilder.Entity("LX.TestSpace.Server.DAL.Entities.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TestId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("TestId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            TestId = 1,
                            Text = "What is CLR?"
                        },
                        new
                        {
                            Id = 2,
                            TestId = 1,
                            Text = "What does EntityFramework allow?"
                        },
                        new
                        {
                            Id = 3,
                            TestId = 1,
                            Text = "What are the main data types in c#?"
                        },
                        new
                        {
                            Id = 4,
                            TestId = 1,
                            Text = "What is the difference between value types and reference types?"
                        },
                        new
                        {
                            Id = 5,
                            TestId = 1,
                            Text = "Can the String type be passed by reference?"
                        },
                        new
                        {
                            Id = 6,
                            TestId = 1,
                            Text = "What's the difference between String and StringBuilder?"
                        },
                        new
                        {
                            Id = 7,
                            TestId = 1,
                            Text = "How is data passed from method to method?"
                        },
                        new
                        {
                            Id = 8,
                            TestId = 1,
                            Text = "What are named arguments"
                        },
                        new
                        {
                            Id = 9,
                            TestId = 1,
                            Text = "Why is C# called an object-oriented language?"
                        },
                        new
                        {
                            Id = 10,
                            TestId = 1,
                            Text = "What is the main difference between C# and JavaScript?"
                        },
                        new
                        {
                            Id = 11,
                            TestId = 1,
                            Text = "How does C# solve the memory cleanup problem?"
                        },
                        new
                        {
                            Id = 12,
                            TestId = 1,
                            Text = "What is the difference between Scruct and Class?"
                        },
                        new
                        {
                            Id = 13,
                            TestId = 1,
                            Text = "Generics: what is it and what problem do they solve?"
                        },
                        new
                        {
                            Id = 14,
                            TestId = 1,
                            Text = "What is unmanaged code?"
                        },
                        new
                        {
                            Id = 15,
                            TestId = 1,
                            Text = "Can we create a constructor in a static class?"
                        },
                        new
                        {
                            Id = 16,
                            TestId = 1,
                            Text = "Access Modifiers"
                        },
                        new
                        {
                            Id = 17,
                            TestId = 1,
                            Text = "Who can access protected variables?"
                        },
                        new
                        {
                            Id = 18,
                            TestId = 1,
                            Text = "What is the benefit of using an Interface?"
                        },
                        new
                        {
                            Id = 19,
                            TestId = 1,
                            Text = "Can an Interface implement methods?"
                        },
                        new
                        {
                            Id = 20,
                            TestId = 1,
                            Text = "Can an Interface describe properties?"
                        },
                        new
                        {
                            Id = 21,
                            TestId = 1,
                            Text = "What is Entity Framework?"
                        },
                        new
                        {
                            Id = 22,
                            TestId = 1,
                            Text = "What is a using directive, when and what is it used for?"
                        },
                        new
                        {
                            Id = 23,
                            TestId = 1,
                            Text = "What is JSON?"
                        },
                        new
                        {
                            Id = 24,
                            TestId = 1,
                            Text = "What is needed so that our collection can be iterated by ForEach?"
                        });
                });

            modelBuilder.Entity("LX.TestSpace.Server.DAL.Entities.Test", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserNameCreate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationDate = new DateTime(2023, 6, 16, 10, 50, 48, 521, DateTimeKind.Local).AddTicks(1705),
                            Description = "Test",
                            Duration = new TimeSpan(0, 0, 0, 0, 0),
                            IsPublished = true,
                            Name = "Test",
                            UserNameCreate = "TestUser"
                        });
                });

            modelBuilder.Entity("LX.TestSpace.Server.DAL.Entities.TestResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("FinishedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("TestId")
                        .HasColumnType("int");

                    b.Property<double>("TestScore")
                        .HasColumnType("float");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("TestId");

                    b.HasIndex("UserId");

                    b.ToTable("TestResults");
                });

            modelBuilder.Entity("LX.TestSpace.Server.DAL.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "5328e587-251f-4f02-9d79-f4dfccae023c",
                            AccessFailedCount = 1,
                            ConcurrencyStamp = "0733a141-df04-4717-ae0f-83767851d6e2",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            Name = "Test",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "e4e96d11-6db4-41df-92e2-8096e52240c1",
                            Surname = "Test",
                            TwoFactorEnabled = true,
                            UserName = "TestUser"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("LX.TestSpace.Server.DAL.Entities.Answer", b =>
                {
                    b.HasOne("LX.TestSpace.Server.DAL.Entities.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("LX.TestSpace.Server.DAL.Entities.Question", b =>
                {
                    b.HasOne("LX.TestSpace.Server.DAL.Entities.Test", "Test")
                        .WithMany("Questions")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Test");
                });

            modelBuilder.Entity("LX.TestSpace.Server.DAL.Entities.TestResult", b =>
                {
                    b.HasOne("LX.TestSpace.Server.DAL.Entities.Test", "Test")
                        .WithMany("TestResults")
                        .HasForeignKey("TestId");

                    b.HasOne("LX.TestSpace.Server.DAL.Entities.User", "User")
                        .WithMany("TestResults")
                        .HasForeignKey("UserId");

                    b.OwnsMany("LX.TestSpace.Server.DAL.Entities.QuestionSnapshot", "QuestionSnapshots", b1 =>
                        {
                            b1.Property<int>("TestResultId")
                                .HasColumnType("int");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            b1.Property<string>("ImagePath")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<double>("QuestionResult")
                                .HasColumnType("float");

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("TestResultId", "Id");

                            b1.ToTable("TestResults");

                            b1.ToJson("QuestionSnapshots");

                            b1.WithOwner()
                                .HasForeignKey("TestResultId");

                            b1.OwnsMany("LX.TestSpace.Server.DAL.Entities.UserAnswersSnapshot", "UserAnswersSnapshots", b2 =>
                                {
                                    b2.Property<int>("QuestionSnapshotTestResultId")
                                        .HasColumnType("int");

                                    b2.Property<int>("QuestionSnapshotId")
                                        .HasColumnType("int");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int");

                                    b2.Property<bool>("IsCorrect")
                                        .HasColumnType("bit");

                                    b2.Property<bool>("IsSelected")
                                        .HasColumnType("bit");

                                    b2.Property<string>("Text")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuestionSnapshotTestResultId", "QuestionSnapshotId", "Id");

                                    b2.ToTable("TestResults");

                                    b2.WithOwner()
                                        .HasForeignKey("QuestionSnapshotTestResultId", "QuestionSnapshotId");
                                });

                            b1.Navigation("UserAnswersSnapshots");
                        });

                    b.OwnsOne("LX.TestSpace.Server.DAL.Entities.TestSnapshot", "TestSnapshot", b1 =>
                        {
                            b1.Property<int>("TestResultId")
                                .HasColumnType("int");

                            b1.Property<DateTime>("CreationDate")
                                .HasColumnType("datetime2");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<TimeSpan>("Duration")
                                .HasColumnType("time");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("UserNameCreate")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("TestResultId");

                            b1.ToTable("TestResults");

                            b1.ToJson("TestSnapshot");

                            b1.WithOwner()
                                .HasForeignKey("TestResultId");
                        });

                    b.Navigation("QuestionSnapshots");

                    b.Navigation("Test");

                    b.Navigation("TestSnapshot")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("LX.TestSpace.Server.DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("LX.TestSpace.Server.DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LX.TestSpace.Server.DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("LX.TestSpace.Server.DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LX.TestSpace.Server.DAL.Entities.Question", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("LX.TestSpace.Server.DAL.Entities.Test", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("TestResults");
                });

            modelBuilder.Entity("LX.TestSpace.Server.DAL.Entities.User", b =>
                {
                    b.Navigation("TestResults");
                });
#pragma warning restore 612, 618
        }
    }
}
