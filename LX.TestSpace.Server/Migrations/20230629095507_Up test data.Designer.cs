// <auto-generated />
using System;
using LX.TestSpace.Server.DAL.DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LX.TestSpace.Server.Migrations
{
    [DbContext(typeof(TestSpaceDbContext))]
    [Migration("20230629095507_Up test data")]
    partial class Uptestdata
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes", (string)null);
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.Key", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Algorithm")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DataProtected")
                        .HasColumnType("bit");

                    b.Property<bool>("IsX509Certificate")
                        .HasColumnType("bit");

                    b.Property<string>("Use")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Use");

                    b.ToTable("Keys", (string)null);
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Key");

                    b.HasIndex("ConsumedTime");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.HasIndex("SubjectId", "SessionId", "Type");

                    b.ToTable("PersistedGrants", (string)null);
                });

            modelBuilder.Entity("LX.TestSpace.Server.DAL.Entities.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers");

                    b.HasData(
                        new
                        {
                            Id = 90,
                            IsCorrect = true,
                            QuestionId = 25,
                            Text = "PUT method adds a child resource under resources collection, when POST modifies a single resource being a part of existing resource collection."
                        },
                        new
                        {
                            Id = 91,
                            IsCorrect = false,
                            QuestionId = 25,
                            Text = "No, that's incorrect. PUT and POST methods can be used to create new resources and modify existing resources, regardless of whether they are children of a resource collection or not."
                        },
                        new
                        {
                            Id = 92,
                            IsCorrect = false,
                            QuestionId = 25,
                            Text = "Yes, that's correct, but not completely. The PUT method is used to create or update a resource within a resource collection, while the POST method is used to create a new resource within a collection. PUT can also update an existing resource."
                        },
                        new
                        {
                            Id = 93,
                            IsCorrect = false,
                            QuestionId = 25,
                            Text = "No, that's incorrect. PUT and POST methods can be used to create new resources and modify existing resources, regardless of whether they are children of a resource collection or not. However, typically PUT is used for full resource replacement, while POST is used for partial resource updates or creating new resources."
                        },
                        new
                        {
                            Id = 94,
                            IsCorrect = false,
                            QuestionId = 26,
                            Text = "1"
                        },
                        new
                        {
                            Id = 95,
                            IsCorrect = false,
                            QuestionId = 26,
                            Text = "2"
                        },
                        new
                        {
                            Id = 96,
                            IsCorrect = false,
                            QuestionId = 26,
                            Text = "3"
                        },
                        new
                        {
                            Id = 97,
                            IsCorrect = false,
                            QuestionId = 26,
                            Text = "4"
                        },
                        new
                        {
                            Id = 98,
                            IsCorrect = true,
                            QuestionId = 26,
                            Text = "5"
                        },
                        new
                        {
                            Id = 99,
                            IsCorrect = false,
                            QuestionId = 27,
                            Text = "Transport layer"
                        },
                        new
                        {
                            Id = 100,
                            IsCorrect = false,
                            QuestionId = 27,
                            Text = "Session layer"
                        },
                        new
                        {
                            Id = 101,
                            IsCorrect = true,
                            QuestionId = 27,
                            Text = "Presentation layer"
                        },
                        new
                        {
                            Id = 102,
                            IsCorrect = false,
                            QuestionId = 27,
                            Text = "Transport Layer"
                        },
                        new
                        {
                            Id = 103,
                            IsCorrect = false,
                            QuestionId = 28,
                            Text = "Abstraction"
                        },
                        new
                        {
                            Id = 104,
                            IsCorrect = false,
                            QuestionId = 28,
                            Text = "Polymorphism"
                        },
                        new
                        {
                            Id = 105,
                            IsCorrect = false,
                            QuestionId = 28,
                            Text = "Encapsulation"
                        },
                        new
                        {
                            Id = 106,
                            IsCorrect = true,
                            QuestionId = 28,
                            Text = "Inheritance"
                        },
                        new
                        {
                            Id = 107,
                            IsCorrect = false,
                            QuestionId = 29,
                            Text = "Provide loose coupling"
                        },
                        new
                        {
                            Id = 108,
                            IsCorrect = false,
                            QuestionId = 29,
                            Text = "Provide high cohesion"
                        },
                        new
                        {
                            Id = 109,
                            IsCorrect = true,
                            QuestionId = 29,
                            Text = "Injecting unmanaged code"
                        },
                        new
                        {
                            Id = 110,
                            IsCorrect = false,
                            QuestionId = 29,
                            Text = "Injecting dependent file structures."
                        },
                        new
                        {
                            Id = 111,
                            IsCorrect = false,
                            QuestionId = 30,
                            Text = "Linked list"
                        },
                        new
                        {
                            Id = 112,
                            IsCorrect = false,
                            QuestionId = 30,
                            Text = "Stack"
                        },
                        new
                        {
                            Id = 113,
                            IsCorrect = false,
                            QuestionId = 30,
                            Text = "Binary tree"
                        },
                        new
                        {
                            Id = 114,
                            IsCorrect = true,
                            QuestionId = 30,
                            Text = "Queue"
                        },
                        new
                        {
                            Id = 115,
                            IsCorrect = false,
                            QuestionId = 30,
                            Text = "Directed graph"
                        },
                        new
                        {
                            Id = 116,
                            IsCorrect = true,
                            QuestionId = 31,
                            Text = "XML"
                        },
                        new
                        {
                            Id = 117,
                            IsCorrect = false,
                            QuestionId = 31,
                            Text = "POST"
                        },
                        new
                        {
                            Id = 118,
                            IsCorrect = false,
                            QuestionId = 31,
                            Text = "REST"
                        },
                        new
                        {
                            Id = 119,
                            IsCorrect = true,
                            QuestionId = 31,
                            Text = "JSON"
                        },
                        new
                        {
                            Id = 120,
                            IsCorrect = true,
                            QuestionId = 31,
                            Text = "Binary "
                        },
                        new
                        {
                            Id = 121,
                            IsCorrect = true,
                            QuestionId = 31,
                            Text = "SOAP"
                        },
                        new
                        {
                            Id = 122,
                            IsCorrect = true,
                            QuestionId = 32,
                            Text = "Agile"
                        },
                        new
                        {
                            Id = 123,
                            IsCorrect = false,
                            QuestionId = 32,
                            Text = "SCAM"
                        },
                        new
                        {
                            Id = 124,
                            IsCorrect = true,
                            QuestionId = 32,
                            Text = "Waterfall Mode"
                        },
                        new
                        {
                            Id = 125,
                            IsCorrect = true,
                            QuestionId = 32,
                            Text = "Rapid"
                        },
                        new
                        {
                            Id = 126,
                            IsCorrect = false,
                            QuestionId = 32,
                            Text = "Datalark"
                        });
                });

            modelBuilder.Entity("LX.TestSpace.Server.DAL.Entities.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TestId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("TestId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = 25,
                            TestId = 2,
                            Text = "Is the following statement true?"
                        },
                        new
                        {
                            Id = 26,
                            TestId = 2,
                            Text = "What digit does the status code begin with, signaling an error on the server side?"
                        },
                        new
                        {
                            Id = 27,
                            TestId = 2,
                            Text = "Decryption and encryption are the features of?"
                        },
                        new
                        {
                            Id = 28,
                            TestId = 2,
                            Text = "Which feature of OOP indicates code reusability?"
                        },
                        new
                        {
                            Id = 29,
                            TestId = 2,
                            Text = "What is Dependency Injection used for"
                        },
                        new
                        {
                            Id = 30,
                            TestId = 2,
                            Text = "Which of the following data structures implement FIFO asset management?"
                        },
                        new
                        {
                            Id = 31,
                            TestId = 2,
                            Text = "Which of the following serialization protocols exist?"
                        },
                        new
                        {
                            Id = 32,
                            TestId = 2,
                            Text = "What development methodologies exist?"
                        });
                });

            modelBuilder.Entity("LX.TestSpace.Server.DAL.Entities.Test", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserNameCreate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tests");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            CreationDate = new DateTime(2023, 6, 29, 12, 55, 7, 828, DateTimeKind.Local).AddTicks(4634),
                            Description = "The \"REST\" test is designed to assess the knowledge and skills of a developer in the field of RESTful API architecture. Questions may relate to various aspects related to REST, such as HTTP methods, URIs, data formatting, security, authentication, authorization, etc.\r\n\r\nThe purpose of the \"REST\" test is to assess the level of knowledge of the developer in the field of RESTful API, as well as to identify areas in which he may need additional training or development.",
                            Duration = new TimeSpan(0, 0, 20, 0, 0),
                            IsPublished = true,
                            Name = "What about REST?",
                            UserNameCreate = "1@1.com"
                        });
                });

            modelBuilder.Entity("LX.TestSpace.Server.DAL.Entities.TestResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("FinishedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("TestId")
                        .HasColumnType("int");

                    b.Property<double>("TestScore")
                        .HasColumnType("float");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("TestId");

                    b.HasIndex("UserId");

                    b.ToTable("TestResults");
                });

            modelBuilder.Entity("LX.TestSpace.Server.DAL.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("LX.TestSpace.Server.DAL.Entities.Answer", b =>
                {
                    b.HasOne("LX.TestSpace.Server.DAL.Entities.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("LX.TestSpace.Server.DAL.Entities.Question", b =>
                {
                    b.HasOne("LX.TestSpace.Server.DAL.Entities.Test", "Test")
                        .WithMany("Questions")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Test");
                });

            modelBuilder.Entity("LX.TestSpace.Server.DAL.Entities.TestResult", b =>
                {
                    b.HasOne("LX.TestSpace.Server.DAL.Entities.Test", "Test")
                        .WithMany("TestResults")
                        .HasForeignKey("TestId");

                    b.HasOne("LX.TestSpace.Server.DAL.Entities.User", "User")
                        .WithMany("TestResults")
                        .HasForeignKey("UserId");

                    b.OwnsMany("LX.TestSpace.Server.DAL.Entities.QuestionSnapshot", "QuestionSnapshots", b1 =>
                        {
                            b1.Property<int>("TestResultId")
                                .HasColumnType("int");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            b1.Property<string>("ImagePath")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<double>("QuestionResult")
                                .HasColumnType("float");

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("TestResultId", "Id");

                            b1.ToTable("TestResults");

                            b1.ToJson("QuestionSnapshots");

                            b1.WithOwner()
                                .HasForeignKey("TestResultId");

                            b1.OwnsMany("LX.TestSpace.Server.DAL.Entities.UserAnswersSnapshot", "UserAnswersSnapshots", b2 =>
                                {
                                    b2.Property<int>("QuestionSnapshotTestResultId")
                                        .HasColumnType("int");

                                    b2.Property<int>("QuestionSnapshotId")
                                        .HasColumnType("int");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int");

                                    b2.Property<int>("AnswerId")
                                        .HasColumnType("int");

                                    b2.Property<bool?>("IsCorrect")
                                        .HasColumnType("bit");

                                    b2.Property<bool>("IsSelected")
                                        .HasColumnType("bit");

                                    b2.Property<string>("Text")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuestionSnapshotTestResultId", "QuestionSnapshotId", "Id");

                                    b2.ToTable("TestResults");

                                    b2.ToJson("UserAnswersSnapshots");

                                    b2.WithOwner()
                                        .HasForeignKey("QuestionSnapshotTestResultId", "QuestionSnapshotId");
                                });

                            b1.Navigation("UserAnswersSnapshots");
                        });

                    b.OwnsOne("LX.TestSpace.Server.DAL.Entities.TestSnapshot", "TestSnapshot", b1 =>
                        {
                            b1.Property<int>("TestResultId")
                                .HasColumnType("int");

                            b1.Property<DateTime>("CreationDate")
                                .HasColumnType("datetime2");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<TimeSpan>("Duration")
                                .HasColumnType("time");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("UserNameCreate")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("TestResultId");

                            b1.ToTable("TestResults");

                            b1.ToJson("TestSnapshot");

                            b1.WithOwner()
                                .HasForeignKey("TestResultId");
                        });

                    b.Navigation("QuestionSnapshots");

                    b.Navigation("Test");

                    b.Navigation("TestSnapshot")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("LX.TestSpace.Server.DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("LX.TestSpace.Server.DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LX.TestSpace.Server.DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("LX.TestSpace.Server.DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LX.TestSpace.Server.DAL.Entities.Question", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("LX.TestSpace.Server.DAL.Entities.Test", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("TestResults");
                });

            modelBuilder.Entity("LX.TestSpace.Server.DAL.Entities.User", b =>
                {
                    b.Navigation("TestResults");
                });
#pragma warning restore 612, 618
        }
    }
}
